// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAuth {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

enum GenderType {
  Male
  Female
  UniSex
}

model User {
  id                    String            @id @default(uuid())
  authId                String            @unique
  name                  String
  gender                GenderType?       
  userAuth              UserAuth          @relation(fields: [authId], references: [id])
  userAttributes        UserAttributes?
  initiatedExchanges    ExchangeHistory[] @relation("user1Relation")
  receivedExchanges     ExchangeHistory[] @relation("user2Relation")
  UserAddress           UserAddress?
  phoneNumber           String?
  userCredibility       UserCredibility?
  reviewsRecieved       Review[]          @relation("reviewRecieved")
  reviewsGiven          Review[]          @relation("reviewGiven")
  UserAccessories       Accessory[]
  initiateAccessoryChat AccessoryChat[]   @relation("initiateUserRelation")
  recievedAccessoryChat AccessoryChat[]   @relation("receivedUserRelation")
}

model AccessoryChat {
  id             String    @id @default(uuid())
  accessoryId    String
  initiateUserId String
  receivedUserId String
  message        String
  createdAt      DateTime  @default(now())
  accessory      Accessory @relation(fields: [accessoryId], references: [id])
  user1          User      @relation("initiateUserRelation", fields: [initiateUserId], references: [id])
  user2          User      @relation("receivedUserRelation", fields: [receivedUserId], references: [id])
}

model Accessory {
  id             String          @id @default(uuid())
  userId         String
  imageUrl       String
  accessoryType  String
  accessoryName  String
  accessoryColor Color
  accessorySize  Size
  user           User            @relation(fields: [userId], references: [id])
  AccessoryChat  AccessoryChat[]
}

model UserCredibility {
  id     String  @id @default(uuid())
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
  rating Float   @default(3)
  badge  Badge[]
}

enum BadgeName {
  MostHelpful
  MostFriendly
  MostActive
  MostResponsive
  MostTrustworthy
}

model Badge {
  id                String           @id @default(uuid())
  userCredibilityId String?
  badgeType         String
  badgeLevel        String
  badgeName         BadgeName
  badgePoints       Int
  UserCredibility   UserCredibility? @relation(fields: [userCredibilityId], references: [id])
}

model Review {
  id              String   @id @default(uuid())
  reviewForuserId String
  reviewerUserId  String
  review          String
  rating          Float
  createdAt       DateTime @default(now())
  reviewOn        User     @relation("reviewRecieved", fields: [reviewForuserId], references: [id])
  reviewer        User     @relation("reviewGiven", fields: [reviewerUserId], references: [id])
}

model UserAddress {
  id       String @id @default(uuid())
  userId   String @unique
  city     String
  state    String
  country  String
  street   String
  pinCode  String
  landmark String
  user     User   @relation(fields: [userId], references: [id])
}

model UserAttributes {
  id            String         @id @default(uuid())
  userId        String         @unique
  height        Float
  weight        Float
  age           Int
  sizeTop       Size
  sizeBottom    Size
  user          User           @relation(fields: [userId], references: [id])
  preferedColor Color
  type          PreferenceType
  // preferedColor    Color[]
  // UserPreference UserPreference[] @relation("userPreferenceRelation")
}

// model UserPreference {
//   id               String         @id @default(uuid())
//   userAttributesId String
//   type             PreferenceType
//   preferedColor    Color[]
//   userAttributes   UserAttributes @relation("userPreferenceRelation", fields: [userAttributesId], references: [id])
// }

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  SIZENOTREQUIRED
}

enum PreferenceType {
  Casual
  Formal
  Funky
  Sporty
  Traditional
  Streetwear
}

enum Color {
  Red
  Blue
  Green
  Yellow
  Orange
  Purple
  Pink
  Brown
  Black
  White
  Grey
}

enum crdb_internal_region {
  aws_ap_south_1 @map("aws-ap-south-1")
}

model ExchangeHistory {
  id               String   @id @default(uuid())
  user1Id          String
  user2Id          String
  description      String
  accessoryIdUser1 String
  accessoryIdUser2 String
  user1Review      String? // becomes null by default
  user2Review      String?
  user1Rating      Float?
  user2Rating      Float?
  createdAt        DateTime @default(now())
  user1            User     @relation("user1Relation", fields: [user1Id], references: [id])
  user2            User     @relation("user2Relation", fields: [user2Id], references: [id])
}
